This is a fork of the `PHPHaml project
<http://phphaml.sourceforge.net/>`_. I thought it would be more
effective to track patches using github rather than just emailing them
to upstream.

So far the patches included here are:

* "magic else" -- PHPHaml allows templates like the following::

    - if(false)
      Hi
    - else
      Bye

  However, upstream breaks on this "else" because the regex being used
  to look for this case doesn't match the code that generates it.

* dashes in id names: fix a bug where ids like ``#abc-def`` weren't
  recognized as XHTML ids.

* arrays as hashes: allow passing hashes to the element attribute tag,
  like this::

      - $ary = array('name' => 'myname', 'href' => "#myname")
      %a{ $ary, :rel => 'link' }

  The behavior is not exactly like Ruby HAML, because the attributes
  specified in the element itself will all come at the end, but it's a
  start.

* pipe handling: Ruby HAML treats this as a special case::

      Some text
      |
      More text

  If a pipe is the first character on a line, not counting
  indentation, it does not count as a line break. Since HTML designers
  tend to use the pipe character as a separator, it's important to get
  this case right.

* commas: Ruby HAML doesn't do much processing on attribute elements,
  which allows you to do things like this::

      %a{ :href=>"a,b,c", :target => "_blank" }

  PHPHaml has to do some processing here to transform ``:href`` into
  ``"href"`` and put everything into an ``array()``. To do this, it
  splits on commas, which is obviously problematic if one of your
  values has a comma in it.

  Right now the patch to fix this is really quite terrible: it splits
  on a comma followed by either a space or by some spaces and then a
  colon. This allows us to use commas that aren't followed by spaces
  in URLs, as in the above, as well as to split on commas that are
  immediately followed by a colon, like
  ``%a{:href=>"a,b,c",:target=>"_blank"}``.

  This only buys us a little bit, which is that we can easily refer to
  URLs generated by the Vignette CMS, which have a ton of commas in
  them. I think it might be possible to be a little smarter and
  translate the Ruby expression into a PHP expression without
  splitting on commas, but I haven't quite figured out how yet.

* reentrancy: previously PHPHaml had a giant static $aVariables array,
  which was modified by calling assign() on *any* HamlParser
  object. This sucks if you have multiple HamlParsers, want to render
  HAML recursively, etc. Turning that into an object-local variable
  was pretty trivial. Additionally, we found it convenient to pass a
  $context array to render(), which is used in addition to
  $this->aVariables, to populate the scope of the HAML code.
